version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hosting_panel_postgres
    environment:
      POSTGRES_DB: hosting_panel
      POSTGRES_USER: hosting_user
      POSTGRES_PASSWORD: hosting_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - hosting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hosting_user -d hosting_panel"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: hosting_panel_redis
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hosting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Hosting Panel Application
  hosting_panel:
    build: .
    container_name: hosting_panel_app
    env_file: env.example
    environment:
      # Database settings
      DATABASE_URL: postgresql://hosting_user:hosting_password_123@postgres:5432/hosting_panel
      
      # Redis settings
      REDIS_URL: redis://:redis_password_123@redis:6379
      
      # Application settings
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: false
      
      # Security (change these in production!)
      SECRET_KEY: your-super-secret-key-change-this-in-production
      ADMIN_USERNAME: admin
      ADMIN_EMAIL: admin@localhost.com
      ADMIN_PASSWORD: admin123
      
      # File paths (container paths)
      BASE_DIR: /var/www
      BACKUP_PATH: /var/backups/hosting-panel
      
      # Docker settings
      DOCKER_ENABLED: true
      DOCKER_SOCKET: /var/run/docker.sock
      
      # CORS - Allow all origins for simplicity
      ALLOWED_HOSTS: '["*"]'
      
      # Web server settings
      WEB_SERVER: nginx
      PHP_VERSIONS: '["7.4","8.0","8.1","8.2"]'
      DEFAULT_PHP_VERSION: "8.1"
      
      # SSL settings
      SSL_PROVIDER: letsencrypt
      CERTBOT_EMAIL: admin@localhost
      
      # Monitoring
      MONITORING_ENABLED: true
      MONITORING_INTERVAL: 60
      
      # Email settings
      EMAIL_ENABLED: false
      
      # DNS settings
      DNS_ENABLED: false
      
      # Backup settings
      BACKUP_ENABLED: true
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - ./app:/app/app:ro
      - ./main.py:/app/main.py:ro
      - ./requirements.txt:/app/requirements.txt:ro
      - website_data:/var/www
      - backup_data:/var/backups/hosting-panel
      - log_data:/var/log/hosting-panel
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hosting_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production use)
  nginx:
    image: nginx:alpine
    container_name: hosting_panel_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - website_data:/var/www
    depends_on:
      - hosting_panel
    networks:
      - hosting_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  website_data:
    driver: local
  backup_data:
    driver: local
  log_data:
    driver: local

networks:
  hosting_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
